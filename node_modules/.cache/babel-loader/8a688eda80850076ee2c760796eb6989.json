{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell 10\\\\WORKSPACE\\\\src\\\\Table\\\\AdminEnrollmentsData.js\";\nimport React from \"react\";\nimport axios from 'axios';\nimport \"../CRUDTable.css\";\nimport { Component } from \"react\";\nimport { toast } from 'react-toastify';\nimport * as AiIcons from \"react-icons/ai\";\nimport * as IoIcons from \"react-icons/io\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport CRUDTable, { Fields, Field, CreateForm, UpdateForm, DeleteForm, Pagination } from \"react-crud-table\";\nimport UPDATE from 'react-crud-table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sessiondetails = JSON.parse(localStorage.getItem(\"sessiondetails\"));\ntoast.configure(); // Component's Base CSS\n//import \"./index.css\";\n\nconsole.log();\nlet tasks = [];\n\nfunction getTask(testTask) {\n  tasks = testTask; // console.log(tasks);\n}\n\nfunction Acceptapplication(AdminEnrollmentsRow) {\n  console.log(AdminEnrollmentsRow);\n  axios.post('http://103.142.165.146:8080/smarter-learnings/enrollments/', AdminEnrollmentsRow).then(response => {\n    if (response.data.status == \"Success\") {\n      console.log(response);\n      window.location.reload(\"/\");\n    } else {\n      toast('Update Failed');\n    }\n  }).catch(error => {\n    console.log(error);\n    toast('Update Failed');\n  });\n}\n\n_c = Acceptapplication;\nconst SORTERS = {\n  NUMBER_ASCENDING: mapper => (a, b) => mapper(a) - mapper(b),\n  NUMBER_DESCENDING: mapper => (a, b) => mapper(b) - mapper(a),\n  STRING_ASCENDING: mapper => (a, b) => mapper(a).localeCompare(mapper(b)),\n  STRING_DESCENDING: mapper => (a, b) => mapper(b).localeCompare(mapper(a))\n};\n\nconst getSorter = data => {\n  const mapper = x => x[data.field];\n\n  let sorter = SORTERS.STRING_ASCENDING(mapper);\n\n  if (data.field === \"user_email\") {\n    sorter = data.direction === \"ascending\" ? SORTERS.STRING_ASCENDING(mapper) : SORTERS.STRING_DESCENDING(mapper);\n  } else if (data.field === \"enrollment_type\") {\n    sorter = data.direction === \"ascending\" ? SORTERS.STRING_ASCENDING(mapper) : SORTERS.STRING_DESCENDING(mapper);\n  } else if (data.field === \"enrollment_status\") {\n    sorter = data.direction === \"ascending\" ? SORTERS.STRING_ASCENDING(mapper) : SORTERS.STRING_DESCENDING(mapper);\n  } else if (data.field === \"course_id\") {\n    sorter = data.direction === \"ascending\" ? SORTERS.STRING_ASCENDING(mapper) : SORTERS.STRING_DESCENDING(mapper);\n  } else if (data.field === \"user_name\") {\n    sorter = data.direction === \"ascending\" ? SORTERS.STRING_ASCENDING(mapper) : SORTERS.STRING_DESCENDING(mapper);\n  } else if (data.field === \"admin_id\") {\n    sorter = data.direction === \"ascending\" ? SORTERS.STRING_ASCENDING(mapper) : SORTERS.STRING_DESCENDING(mapper);\n  } else if (data.field === \"followup_datetime\" || data.field === \"enrolled_date\") {\n    sorter = data.direction === \"ascending\" ? SORTERS.STRING_ASCENDING(mapper) : SORTERS.STRING_DESCENDING(mapper);\n  } else {\n    sorter = data.direction === \"ascending\" ? SORTERS.NUMBER_ASCENDING(mapper) : SORTERS.NUMBER_DESCENDING(mapper);\n  }\n\n  return sorter;\n}; // let count = tasks.length;\n// console.log(count);\n\n\nconst service = {\n  fetchItems: payload => {\n    const {\n      activePage,\n      itemsPerPage\n    } = payload.pagination;\n    const start = (activePage - 1) * itemsPerPage;\n    const end = start + itemsPerPage;\n    let result = Array.from(tasks);\n    result = result.sort(getSorter(payload.sort));\n    return Promise.resolve(result.slice(start, end));\n  },\n  fetchTotal: payload => {\n    return Promise.resolve(tasks.length);\n  },\n  create: task => {\n    tasks.push({});\n    Acceptapplication(task);\n    return Promise.resolve(task);\n  },\n  update: data => {\n    const task = tasks.find(t => t.user_email === data.user_email);\n    task.user_email = data.user_email;\n    task.enrollment_type = data.enrollment_type;\n    task.enrollment_status = data.enrollment_status;\n    task.course_id = data.course_id;\n    task.user_phone_number = data.user_phone_number;\n    task.user_name = data.user_name;\n    task.admin_id = sessiondetails.user;\n    task.followup_datetime = data.followup_datetime;\n    task.enrolled_date = data.enrolled_date;\n    Acceptapplication(task);\n    return Promise.resolve(task);\n  }\n};\nconst styles = {\n  container: {\n    margin: \"auto\",\n    width: \"fit-content\"\n  }\n};\n\nconst Coursetest = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: styles.container,\n  children: /*#__PURE__*/_jsxDEV(CRUDTable, {\n    caption: \"Enrollments\",\n    fetchItems: payload => service.fetchItems(payload),\n    children: [/*#__PURE__*/_jsxDEV(Fields, {\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        name: \"user_email\",\n        label: \"User Email\",\n        placeholder: \"User Email\",\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"enrollment_type\",\n        label: \"Enrollment Type\",\n        placeholder: \"Enrollment Type\",\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"enrollment_status\",\n        label: \"Enrollment Status\",\n        placeholder: \"Enrollment Status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"course_id\",\n        label: \"Course ID\",\n        placeholder: \"Course ID\",\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"user_phone_number\",\n        label: \"User Phone Number\",\n        placeholder: \"User Phone Number\",\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"user_name\",\n        label: \"User Name\",\n        placeholder: \"User Name\",\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"admin_id\",\n        label: \"Admin ID\",\n        placeholder: \"Admin ID\",\n        hideInUpdateForm: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"followup_datetime\",\n        label: \"Follow Up date\",\n        placeholder: \"Follow Up date Time\",\n        type: \"date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"enrolled_date\",\n        label: \"Enrolled Date\",\n        placeholder: \"Enrolled Date\",\n        type: \"date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UpdateForm, {\n      title: \"Course Update Process\",\n      message: \"Update Course\",\n      trigger: \"Update\",\n      onSubmit: task => service.update(task),\n      submitText: \"Acpect\",\n      validate: values => {\n        const errors = {};\n\n        if (!values.followup_datetime) {\n          errors.followup_datetime = \"Please, provide Follow Up Date and Time\";\n        }\n\n        if (!values.enrolled_date) {\n          errors.enrolled_date = \"Please, provide Follow Up Date and Time\";\n        }\n\n        if (values.enrollment_status !== \"accepted\" && values.enrollment_status !== \"completed\" && values.enrollment_status !== \"applied\") {\n          errors.enrollment_status = \"Select  'accepted'  or  'completed'  or  'applied'\";\n        }\n\n        return errors;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      itemsPerPage: 7,\n      activePage: 1,\n      fetchTotalOfItems: payload => service.fetchTotal(payload)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 157,\n  columnNumber: 3\n}, this);\n\n_c2 = Coursetest;\n\nclass AdminEnrollmentsData extends Component {\n  constructor(props) {\n    super(props);\n    getTask(this.props.data);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Coursetest, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default AdminEnrollmentsData;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Acceptapplication\");\n$RefreshReg$(_c2, \"Coursetest\");","map":{"version":3,"sources":["C:/Users/Dell 10/WORKSPACE/src/Table/AdminEnrollmentsData.js"],"names":["React","axios","Component","toast","AiIcons","IoIcons","CRUDTable","Fields","Field","CreateForm","UpdateForm","DeleteForm","Pagination","UPDATE","sessiondetails","JSON","parse","localStorage","getItem","configure","console","log","tasks","getTask","testTask","Acceptapplication","AdminEnrollmentsRow","post","then","response","data","status","window","location","reload","catch","error","SORTERS","NUMBER_ASCENDING","mapper","a","b","NUMBER_DESCENDING","STRING_ASCENDING","localeCompare","STRING_DESCENDING","getSorter","x","field","sorter","direction","service","fetchItems","payload","activePage","itemsPerPage","pagination","start","end","result","Array","from","sort","Promise","resolve","slice","fetchTotal","length","create","task","push","update","find","t","user_email","enrollment_type","enrollment_status","course_id","user_phone_number","user_name","admin_id","user","followup_datetime","enrolled_date","styles","container","margin","width","Coursetest","values","errors","AdminEnrollmentsData","constructor","props","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from 'axios';\r\nimport \"../CRUDTable.css\";\r\nimport { Component } from \"react\";\r\nimport { toast } from 'react-toastify';\r\nimport * as AiIcons from \"react-icons/ai\";\r\nimport * as IoIcons from \"react-icons/io\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport CRUDTable, {\r\n  Fields,\r\n  Field,\r\n  CreateForm,\r\n  UpdateForm,\r\n  DeleteForm,\r\n  Pagination\r\n} from \"react-crud-table\";\r\nimport UPDATE from 'react-crud-table';\r\nconst sessiondetails=JSON.parse(localStorage.getItem(\"sessiondetails\"));\r\ntoast.configure()\r\n\r\n// Component's Base CSS\r\n//import \"./index.css\";\r\nconsole.log();\r\nlet tasks = [];\r\n\r\nfunction  getTask(testTask){\r\n  tasks = testTask;\r\n  // console.log(tasks);\r\n}\r\n\r\nfunction Acceptapplication(AdminEnrollmentsRow){\r\n    console.log(AdminEnrollmentsRow);\r\naxios\r\n      .post('http://103.142.165.146:8080/smarter-learnings/enrollments/', AdminEnrollmentsRow )\r\n      .then(response => {\r\n        if(response.data.status ==\"Success\"){\r\n          console.log(response);\r\n            window.location.reload(\"/\");\r\n        }\r\n        else{\r\n          toast('Update Failed')\r\n        }\r\n      })\r\n      .catch(error => {\r\n          console.log(error);\r\n        toast('Update Failed')\r\n      })\r\n}\r\n\r\n\r\nconst SORTERS = {\r\n  NUMBER_ASCENDING: mapper => (a, b) => mapper(a) - mapper(b),\r\n  NUMBER_DESCENDING: mapper => (a, b) => mapper(b) - mapper(a),\r\n  STRING_ASCENDING: mapper => (a, b) => mapper(a).localeCompare(mapper(b)),\r\n  STRING_DESCENDING: mapper => (a, b) => mapper(b).localeCompare(mapper(a))\r\n};\r\n\r\nconst getSorter = data => {\r\n  const mapper = x => x[data.field];\r\n  let sorter = SORTERS.STRING_ASCENDING(mapper);\r\n\r\n  if (data.field === \"user_email\") {\r\n    sorter =\r\n      data.direction === \"ascending\"\r\n        ? SORTERS.STRING_ASCENDING(mapper)\r\n        : SORTERS.STRING_DESCENDING(mapper);\r\n  } \r\n  else if (data.field === \"enrollment_type\"){\r\n    sorter =\r\n      data.direction === \"ascending\"\r\n        ? SORTERS.STRING_ASCENDING(mapper)\r\n        : SORTERS.STRING_DESCENDING(mapper);\r\n  }\r\n  else if (data.field === \"enrollment_status\"){\r\n    sorter =\r\n      data.direction === \"ascending\"\r\n        ? SORTERS.STRING_ASCENDING(mapper)\r\n        : SORTERS.STRING_DESCENDING(mapper);\r\n  }\r\n  else if (data.field === \"course_id\"){\r\n    sorter =\r\n      data.direction === \"ascending\"\r\n        ? SORTERS.STRING_ASCENDING(mapper)\r\n        : SORTERS.STRING_DESCENDING(mapper);\r\n  }\r\n  else if (data.field === \"user_name\"){\r\n    sorter =\r\n      data.direction === \"ascending\"\r\n        ? SORTERS.STRING_ASCENDING(mapper)\r\n        : SORTERS.STRING_DESCENDING(mapper);\r\n  }\r\n  else if (data.field === \"admin_id\"){\r\n    sorter =\r\n      data.direction === \"ascending\"\r\n        ? SORTERS.STRING_ASCENDING(mapper)\r\n        : SORTERS.STRING_DESCENDING(mapper);\r\n  }\r\n  else if (data.field === \"followup_datetime\" || data.field === \"enrolled_date\"){\r\n    sorter =\r\n      data.direction === \"ascending\"\r\n        ? SORTERS.STRING_ASCENDING(mapper)\r\n        : SORTERS.STRING_DESCENDING(mapper);\r\n  }\r\n  else {\r\n    sorter =\r\n      data.direction === \"ascending\"\r\n        ? SORTERS.NUMBER_ASCENDING(mapper)\r\n        : SORTERS.NUMBER_DESCENDING(mapper);\r\n  }\r\n\r\n  return sorter;\r\n};\r\n\r\n// let count = tasks.length;\r\n// console.log(count);\r\nconst service = {\r\n  fetchItems: payload => {\r\n    const { activePage, itemsPerPage } = payload.pagination;\r\n    const start = (activePage - 1) * itemsPerPage;\r\n    const end = start + itemsPerPage;\r\n    let result = Array.from(tasks);\r\n    result = result.sort(getSorter(payload.sort));\r\n    return Promise.resolve(result.slice(start, end));\r\n  },\r\n  fetchTotal: payload => {\r\n    return Promise.resolve(tasks.length);\r\n  },\r\n  create: task => {\r\n    tasks.push({\r\n     });\r\n     Acceptapplication(task);\r\n    return Promise.resolve(task);\r\n  },\r\n  update: data => {\r\n    const task = tasks.find(t => t.user_email === data.user_email);\r\n    task.user_email = data.user_email;\r\n    task.enrollment_type = data.enrollment_type;\r\n    task.enrollment_status = data.enrollment_status;\r\n    task.course_id = data.course_id;\r\n    task.user_phone_number = data.user_phone_number;\r\n    task.user_name = data.user_name;\r\n    task.admin_id = sessiondetails.user;\r\n    task.followup_datetime = data.followup_datetime;\r\n    task.enrolled_date = data.enrolled_date;\r\n    Acceptapplication(task);\r\n    return Promise.resolve(task);\r\n  }\r\n};\r\n\r\nconst styles = {\r\n  container: { margin: \"auto\", width: \"fit-content\" }\r\n};\r\n\r\nconst Coursetest = () => (\r\n  \r\n  \r\n  <div style={styles.container}>\r\n    <CRUDTable\r\n      caption=\"Enrollments\"\r\n      fetchItems={payload => service.fetchItems(payload)}\r\n    >\r\n      <Fields>\r\n        <Field name=\"user_email\" label=\"User Email\" placeholder=\"User Email\" readOnly />\r\n        <Field name=\"enrollment_type\" label=\"Enrollment Type\" placeholder=\"Enrollment Type\" readOnly />\r\n        <Field name=\"enrollment_status\" label=\"Enrollment Status\" placeholder=\"Enrollment Status\" />\r\n        <Field name=\"course_id\" label=\"Course ID\" placeholder=\"Course ID\" readOnly/>\r\n        <Field name=\"user_phone_number\" label=\"User Phone Number\" placeholder=\"User Phone Number\" readOnly />\r\n        <Field name=\"user_name\" label=\"User Name\" placeholder=\"User Name\" readOnly />\r\n        <Field name=\"admin_id\" label=\"Admin ID\" placeholder=\"Admin ID\" hideInUpdateForm />\r\n        <Field name=\"followup_datetime\" label=\"Follow Up date\" placeholder=\"Follow Up date Time\" type =\"date\" />\r\n        <Field name=\"enrolled_date\" label=\"Enrolled Date\" placeholder=\"Enrolled Date\" type=\"date\"/>\r\n      </Fields>\r\n      <UpdateForm\r\n        title=\"Course Update Process\"\r\n        message=\"Update Course\"\r\n        trigger= \"Update\"\r\n        onSubmit={task => service.update(task)}\r\n        submitText=\"Acpect\"\r\n        validate={values => {\r\n          const errors = {};\r\n          if (!values.followup_datetime) {\r\n            errors.followup_datetime = \"Please, provide Follow Up Date and Time\";\r\n          }\r\n          if (!values.enrolled_date) {\r\n            errors.enrolled_date = \"Please, provide Follow Up Date and Time\";\r\n          }\r\n          if (values.enrollment_status !== \"accepted\" && values.enrollment_status !== \"completed\" && values.enrollment_status !== \"applied\") {\r\n            errors.enrollment_status = \"Select  'accepted'  or  'completed'  or  'applied'\";\r\n          }\r\n\r\n          return errors;\r\n        }}\r\n      />\r\n      <Pagination\r\n        itemsPerPage={7}\r\n        activePage = {1}\r\n        fetchTotalOfItems={payload => service.fetchTotal(payload)}\r\n      />\r\n    </CRUDTable>\r\n  </div>\r\n\r\n)\r\n\r\n\r\nclass AdminEnrollmentsData extends Component {\r\n    constructor(props) {\r\n        super(props); \r\n        getTask(this.props.data);\r\n        }\r\n    render() { \r\n      return ( <div>\r\n      <Coursetest/> \r\n      </div>\r\n      );\r\n    }\r\n  }\r\n   \r\n  export default AdminEnrollmentsData;"]},"metadata":{},"sourceType":"module"}